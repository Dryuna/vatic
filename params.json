{"name":"Vatic Action","tagline":"An online annotation tool for human action labeling, can be easily deployed on Amazon Mturk.","body":"VATIC-ACTION: Video Annotation Tools for Human Actions, based on VATIC, http://web.mit.edu/vondrick/vatic/ \r\n\r\nvatic is an online, interactive video annotation tool for computer vision research that crowdsources work to Amazon's Mechanical Turk. Our tool makes it easy to build massive, affordable video data sets. Written in Python + C + Javascript, vatic is free and open-source software.\r\n\r\nThis document will describe how to install and use VATIC-ACTION. If you want \r\nto modify VATIC-ACTION, please read DEVELOPERS after reading this document.\r\n\r\n## == REFERENCES ==\r\n\r\nWhen using our system, please cite:\r\n\r\n    Weiyu Zhang, Menglong Zhu and Konstantinos Derpanis, \"From Actemes to Action:\r\n    A Strongly-supervised Representation for Detailed Action Understanding\" \r\n    International Conference on Computer Vision (ICCV). Dec 2013.\r\n\r\n    Carl Vondrick, Deva Ramanan, Donald Patterson. \"Efficiently Scaling Up\r\n    Video Annotation with Crowdsourced Marketplaces\" European Conference on\r\n    Computer Vision (ECCV) Crete, Greece, September, 2010. \r\n\r\n## == INSTALLATION ==\r\n\r\nNote: VATIC has only been tested on Ubuntu with Apache 2.2 HTTP server and a\r\nMySQL server. This document will describe installation on this platform,\r\nhowever it should work any operating system and with any server.\r\n\r\n### --- Download ---\r\n\r\nYou can download and extract VATIC from our website. Note: do NOT run the \r\ninstaller as root. \r\n\r\n    $ wget http://mit.edu/vondrick/vatic/vatic-install.sh\r\n    $ chmod +x vatic-install.sh\r\n    $ ./vatic-install.sh\r\n    $ cd vatic\r\n\r\n### --- HTTP Server Configuration ---\r\n\r\nOpen the Apache configuration file. On Ubuntu, this file is located at:\r\n\r\n    /etc/apache2/sites-enabled/000-default\r\n\r\nIf you do not use Apache on this computer for any other purpose, replace the\r\ncontents of the file with:\r\n\r\n    WSGIDaemonProcess www-data\r\n    WSGIProcessGroup www-data\r\n\r\n    <VirtualHost *:80>\r\n        ServerName vatic.domain.edu\r\n        DocumentRoot /path/to/vatic/public\r\n\r\n        WSGIScriptAlias /server /path/to/vatic/server.py\r\n        CustomLog /var/log/apache2/access.log combined\r\n    </VirtualHost>\r\n\r\nupdating ServerName with your domain name, DocumentRoot with the path to\r\nthe public directory in VATIC, and WSGIScriptAlias to VATIC's server.py file.\r\n\r\nIf you do use Apache for other purposes, you will have to setup a new virtual\r\nhost with the correct document root and script alias, as shown above.\r\n\r\nMake sure you have the mod_headers module enabled:\r\n\r\n    $ sudo cp /etc/apache2/mods-available/headers.load /etc/apache2/mods-enabled\r\n\r\nAfter making these changes, restart Apache:\r\n\r\n    $ sudo apache2ctl graceful\r\n\r\n### --- SQL Server Configuration ---\r\n\r\nWe recommend creating a separate database specifically for VATIC:\r\n\r\n    $ mysql -u root\r\n    mysql> create database vatic;\r\n\r\nThe next section will automatically create the necessary tables.\r\n\r\n### --- Setup ---\r\n\r\nInside the vatic directory, copy config.py-example to config.py:\r\n\r\n    $ cp config.py-example config.py\r\n\r\nThen open config.py and make changes to the following variables in order to\r\nconfigure VATIC:\r\n\r\n    signature       Amazon Mechanical Turk AWS signature (secret access key)\r\n    accesskey       Amazon Mechanical Turk AWS access key (access key ID)\r\n    sandbox         If true, put into Mturk sandbox mode. For debugging.\r\n    localhost       The local HTTP address: http://vatic.domain.edu/ so it\r\n                    matches the ServerName in Apache.\r\n    database        Database connection string: for example,\r\n                    mysql://user:pass@localhost/vatic\r\n    geolocation     API key from ipinfodb.com for geolocation services\r\n\r\nIf you do not plan on using VATIC on Mechcanical Turk (offlien mode only), you\r\ncan leave the signature and accesskey empty.\r\n\r\nAfter saving results, you can then initialize the database:\r\n\r\n    $ turkic setup --database\r\n\r\nNote: if you want to reset the database, you can do this with:\r\n\r\n    $ turkic setup --database --reset\r\n\r\nwhich will require confirmation to reset in order to prevent data loss.\r\n\r\nFinally, you must also allow VATIC to access turkic, a major dependency:\r\n\r\n    $ turkic setup --public-symlink\r\n\r\n## == ANNOTATION ==\r\n\r\nBefore you continue, you should verify that the installation was correct. You\r\ncan verify this with:\r\n\r\n    $ turkic status --verify\r\n\r\nIf you receive any error messages, it means the installation was not complete\r\nand you should review the previous section. Note: If you do not plan on\r\nusing Mechanical Turk, you can safely ignore any errors caused by Mechanical\r\nTurk.\r\n\r\n### --- Frame Extraction ---\r\n\r\nOur system requires that videos are extracted into JPEG frames. Our tool can \r\ndo this automatically for you:\r\n\r\n    $ mkdir /path/to/output/directory\r\n    $ turkic extract /path/to/video.mp4 /path/to/output/directory\r\n\r\nBy default, our tool will resize the frames to fit within a 720x480 rectangle.\r\nWe believe this resolution is ideal for online video viewing. You can change \r\nresolution with options:\r\n\r\n    $ turkic extract /path/to/video.mp4 /path/to/output/directory\r\n      --width 1000 --height 1000\r\n\r\nor\r\n\r\n    $ turkic extract /path/to/video.mp4 /path/to/output/directory\r\n      --no-resize\r\n\r\nThe tool will maintain aspect ratio in all cases.\r\n\r\nAlternatively, if you have already extracted frames, you can use the\r\nformatframes command to format the video into a format that VATIC understands:\r\n\r\n    $ turkic formatframes /path/to/frames/ /path/to/output/directory\r\n\r\nThe above command will read all the images in /path/to/frames and create\r\nhard links (soft copy) in /path/to/output/directory.\r\n\r\n### --- Importing a Video ---\r\n\r\nAfter extracting frames, the video can be imported into our tool for \r\nannotation. The general syntax for this operation is:\r\n\r\n    $ turkic load identifier /path/to/output/directory Label1 Label2 LabelN\r\n\r\nwhere identifier is a unique string that you will use to refer to this video,\r\n/path/to/output/directory is the directory of frames, and LabelX are class\r\nlabels that you want annotated (e.g., Person, Car, Bicycle). You can have as\r\nmany class labels as you wish, but you must have at least one.\r\n\r\nWhen a video is imported, it is broken into small segments typically of only a\r\nfew seconds. When all the segments are annotated, the annotations are merged\r\nacross segments because each segment overlaps another by a small margin.\r\n\r\nThe above command specifies all of the required options, but there are many\r\noptions available as well. We recommend using these options.\r\n\r\n    MTurk Options\r\n        --title         The title that MTurk workers see\r\n        --description   The description that MTurk workers see\r\n        --duration      Time in seconds that a worker has to complete the task\r\n        --lifetime      Time in seconds that the task is online\r\n        --keywords      Keywords that MTurk workers can search on\r\n        --offline       Disable MTurk and use for self annotation only\r\n\r\n    Compensation Options\r\n        --cost                  The price advertised to MTurk workers\r\n        --per-object-bonus      A bonus in dollars paid for each object\r\n        --completion-bonus      A bonus in dollars paid for completing the task\r\n\r\n    Qualification Options\r\n        --min-approved-percent  Minimum percent of tasks the worker must have\r\n                                approved before they can work for you\r\n        --min-approved-amount   Minimum number of tasks that the worker must \r\n                                have completed before they can work for you\r\n\r\n    Video Options\r\n        --length        The length of each segment for this video in frames\r\n        --overlap       The overlap between segments in frames\r\n        --use-frames    When splitting into segments, only the frame intervals\r\n                        specified in this file. Each line should contain a\r\n                        start frame, followed by a space, then the stop frame.\r\n                        Frames outside the intervals in this file will be\r\n                        ignored.\r\n        --skip          If specified, request annotations only every N frames.\r\n        --blow-radius   When a user marks an annotation, blow away all other\r\n                        annotations within this many frames. If you want to\r\n                        allow the user to make fine-grained annotations, set\r\n                        this number to a small integer, or 0 to disable. By\r\n                        default, this is 0.\r\n        --action        action class name \r\n        --pose          coarse camera view point\r\n\r\nYou can also specify temporal attributes that each object label can take on.\r\nFor example, you may have a person object with attributes \"walking\", \"running\",\r\nor \"sitting\". You can specify attributes the same way as labels, except you\r\nprepend an ~ before the text, which bind the attribute to the previous label:\r\n\r\n    $ turkic load identifier /path/to/output/directory Label1 ~Attr1A ~Attr1B\r\n      Label2 ~Attr2A ~Attr2B ~Attr2C Label3 \r\n\r\nIn the above example, Label1 will have attributes Attr1A and Attr1B, Label2\r\nwill have attributes Attr2B, Attr2B, and Attr2C and Label3 will have no \r\nattributes. Specifying attributes is optional.\r\n\r\n### --- Gold Standard Training ---\r\n\r\nIt turns out that video annotation is extremely challenging and most MTurk\r\nworkers lack the necessary patience. For this reason, we recommend requiring\r\nworkers to pass a \"gold standard\" video. When a new worker visits the task,\r\nthey will be redirected to a video for which the annotations are already known.\r\nIn order to move on to the true annotations, the worker must correctly annotate\r\nthe gold standard video first. We have found that this approach significantly\r\nimproves the quality of the annotations.\r\n\r\nTo use this feature, import a video to be used as the gold standard:\r\n\r\n    $ turkic load identifier-train /path/to/frames Label1 Label2 LabelN\r\n      --for-training --for-training-start 0 --for-training-stop 500\r\n      --for-training-overlap 0.5 --for-training-tolerance 0.1\r\n      --for-training-mistakes 1\r\n\r\nYou can also use any of the options described above. Explanations for the new\r\noptions are as follows:\r\n\r\n    --for-training              Specifies that this video is gold standard\r\n    --for-training-start        Specifies the first frame to use\r\n    --for-training-stop         Specifies the last frame to use\r\n    --for-training-overlap      Percent overlap that worker's boxes must match \r\n    --for-training-tolerance    Percent that annotations must agree temporally\r\n    --for-training-mistakes     The number of completely wrong annotations \r\n                                allowed. We recommend setting this to a small,\r\n                                nonzero integer.\r\n\r\nAfter running the above command, it will provide you with an URL for you to\r\ninput the ground truth annotation. You must make this ground truth annotation\r\nas careful as possible, as it will be used to evaluate future workers.\r\n\r\nYou can now specify that a video should use a gold standard video:\r\n\r\n    $ turkic load identifier /path/to/output/directory Label1 Label2 LabelN\r\n      --train-with identifier-train\r\n\r\nWhen a not-yet-seen worker visits this video, they will now be redirected to\r\nto the training video and be required to pass the evaluation test first.\r\n\r\n### --- Publishing Tasks ---\r\n\r\nWhen you are ready for the MTurk workers to annotate, you must publish the \r\ntasks, which will allow workers to start annotating:\r\n    \r\n    $ turkic publish\r\n\r\nYou can limit the number of tasks that are published:\r\n\r\n    $ turkic publish --limit 100\r\n\r\nRunning above command repeatedly will launch tasks in batches of 100. You can\r\nalso disable all pending tasks:\r\n    \r\n    $ turkic publish --disable\r\n\r\nwhich will \"unpublish\" tasks that have not yet been completed.\r\n\r\nIf you have videos that are offline only, you can see their access URLs with\r\nthe command:\r\n\r\n    $ turkic publish --offline\r\n\r\nNote: for the above command to work, you must have loaded the video with the\r\n--offline parameter as well: \r\n\r\n    $ turkic load identifier /path/to/frames Person --offline\r\n\r\n### --- Checking the Status ---\r\n\r\nYou can check the status of the video annotation server with the command:\r\n\r\n    $ turkic status\r\n\r\nThis will list various statistics about the server, such as number of jobs\r\npublished and how many are completed. You can get even more statistics by\r\nrequesting additional information from Amazon:\r\n\r\n    $ turkic status --turk\r\n\r\nwhich will output how much money is left in your account, among other\r\nstatistics.\r\n\r\nWhen all the videos are annotated, the last line will read:\r\n\r\n    Server is offline.\r\n\r\n### --- Retrieving Annotations ---\r\n\r\nYou can get all the annotations for a video with the command:\r\n\r\n    $ turkic dump identifier -o output.txt\r\n\r\nwhich will write the file \"output.txt\" where each line contains one\r\nannotation. Each line contains 10+ columns, separated by spaces. The\r\ndefinition of these columns are:\r\n\r\n    1   Track ID. All rows with the same ID belong to the same path.\r\n    2   xmin. The top left x-coordinate of the bounding box.\r\n    3   ymin. The top left y-coordinate of the bounding box.\r\n    4   xmax. The bottom right x-coordinate of the bounding box.\r\n    5   ymax. The bottom right y-coordinate of the bounding box.\r\n    6   frame. The frame that this annotation represents.\r\n    7   lost. If 1, the annotation is outside of the view screen.\r\n    8   occluded. If 1, the annotation is occluded.\r\n    9   generated. If 1, the annotation was automatically interpolated.\r\n    10  label. The label for this annotation, enclosed in quotation marks.\r\n    11+ attributes. Each column after this is an attribute.\r\n\r\nNote: VATIC-ACTION keeps the same xmin,ymin,xmax,ymax as in VATIC for \r\nconsistency purposes. They are computed and stored as a 10x10 pixels \r\nbounding box around the joint position. For getting the joint position, \r\njust take the center point of the bounding box.\r\n\r\nBy default, the above command will not attempt to merge annotations across\r\nshot segments. You can request merging with the command:\r\n\r\n    $ turkic dump identifier -o output.txt --merge --merge-threshold 0.5\r\n\r\nThe --merge-threshold option is optional, but it is a number between 0 and 1\r\nthat represents much the paths must agree in order to merge. 1 specifies a\r\nperfect match and 0 specifies no match. In practice, 0.5 is sufficient. Merging\r\nis done using the Hungarian algorithm.\r\n\r\nYou can also scale annotations by a factor, which is useful for when the\r\nvideos have been downsampled:\r\n\r\n    $ turkic dump identifier -o output.txt -s 2.8\r\n\r\nor force it to fit within a max dimension:\r\n\r\n    $ turkic dump identifier -o output.txt --dimensions 400x200\r\n\r\nor force it to fit within the dimensions of the original video:\r\n\r\n    $ turkic dump identifier -o output.txt --original-video /path/to/video.mp4\r\n\r\nThe command can also output to many different formats. Available formats are:\r\n\r\n    --xml       Use XML\r\n    --json      Use JSON\r\n    --matlab    Use MATLAB\r\n    --pickle    Use Python's Pickle\r\n    --labelme   Use LabelMe video's XML format\r\n    --pascal    Use PASCAL VOC format, treating each frame as an image\r\n\r\nThe specifications for these formats should be self explanatory.\r\n\r\n### --- Visualizing Videos ---\r\n\r\nYou can preview the annotations by visualizing the results:\r\n\r\n    $ turkic visualize identifier /tmp --merge\r\n\r\nwhich will output frames to /tmp with the bounding boxes with the file name\r\nas the frame number. The visualization will contain some meta information\r\nthat can help you identify bad workers. You can remove this meta information\r\nwith the option:\r\n\r\n    $ turkic visualize identifer /tmp --merge --no-augment\r\n\r\nIf you want to make a video of the visualization (e.g., with ffmpeg), it is\r\nuseful to renumber the frames so that they start counting at 0 and do not\r\nhave any gaps:\r\n\r\n    $ turkic visualize identifier /tmp --merge --renumber\r\n\r\nIf you wish to display the class label and their attributes next to the box,\r\nspecify the --labels option:\r\n\r\n    $ turkic visualize identifier /tmp --labels\r\n\r\n### --- Compensating Workers ---\r\n\r\nWhen you are ready, you can compensate workers:\r\n\r\n    $ turkic compensate --default accept\r\n\r\nwhich will pay all workers for all outstanding tasks. We strongly recommend\r\npaying all workers regardless of their quality. You should attempt to pay\r\nworkers at least once per day.\r\n\r\n### --- Finding Jobs ---\r\n\r\nIf you have found a small mistake in a video and want to make\r\nthe correction yourself, you can start an annotation session initialized with\r\nthe MTurk workers annotations:\r\n\r\n    $ turkic find --id identifier\r\n    $ turkic find --id identifier --frame frame\r\n\r\nwhere identifier is the identifier for the video and frame is the frame number\r\nthat the error occurs. In most cases, this command will return one URL for you\r\nto make the corrections. If it outputs two URLs, it means the frame number\r\noccurs in two overlapping segments, and so you may have to make changes to both\r\nof the segments. You can also omit the frame argument, in which case it will\r\noutput all URLs for that video.\r\n\r\nIf you want to find the HIT id, assignment ID, or worker ID for a particular\r\nvideo, specify the --ids parameter to the vet command:\r\n\r\n    $ turkic find --id identifer --ids\r\n    $ turkic find --id identifer --frame frame --ids\r\n\r\nwill print a list of all the IDs for the video. If the corresponding segment\r\nhas been published and completed, it will list three strings: the HIT ID,\r\nassignment ID, and the worker ID. If the job has been published but not\r\nfinished, it will just list the HIT ID. If the job has not yet been published,\r\nit prints \"(not published)\".\r\n\r\nAdditionally, if you want to find the job that corresponds to a particular\r\nHIT ID, you can use the find command:\r\n\r\n    $ turkic find --hitid HITID\r\n\r\n### --- Quality Control ---\r\n\r\nThe gold standard does a \"pretty good\" job of weeding out bad workers.\r\nNonetheless, there will always be bad workers that we must identify and\r\ninvalidate. Our tool provides a method to sample the annotations provided by\r\nworkers, which you can then manually verify for correctness:\r\n\r\n    $ turkic sample /tmp\r\n\r\nwhich by default will pick 3 random videos that the worker has completed, and\r\npick 4 random frames from each of those videos, and write visualiations to a\r\nfile in /tmp. You can tweak the number of videos and the number of frames with\r\nthe options:\r\n\r\n    $ turkic sample /tmp --number 3 --frames 4\r\n\r\nMoreover, you can only look at work from a certain date:\r\n\r\n    $ turkic sample /tmp --since \"yesterday\"\r\n\r\nThe filename will follow the format of WORKERID-JOBID.jpg. Once you have\r\nidentified a mallicious worker, you can block them, invalidate ALL of their\r\nwork, and respawn their jobs with the command:\r\n\r\n    $ turkic invalidate workerid\r\n\r\nThe options are also available:\r\n\r\n    --no-block      invalidate and respawn, but don't block\r\n    --no-publish    block and invalidate, but don't respawn\r\n\r\nYou can also invalidate and respawn individual jobs with the command:\r\n\r\n    $ turkic invalidate --hit hitid\r\n\r\n\r\n### --- Listing all Videos ---\r\n\r\nYou can retrieve a list of all videos in the system with:\r\n\r\n    $ turkic list\r\n\r\nIf you want just the videos that have been published:\r\n\r\n    $ turkic list --published\r\n\r\nIf you want just the videos that have been worked on:\r\n\r\n    $ turkic list --completed\r\n\r\nIf you instead want the videos that are used for gold standard:\r\n\r\n    $ turkic list --training\r\n\r\nFinally, if you just want to count how many videos are in the system, use the\r\n--count option, in combination with any of the above:\r\n\r\n    $ turkic list --count\r\n    $ turkic list --published --count\r\n\r\nIf you want statistics about each video, then give the --stats option:\r\n\r\n    $ turkic list --stats\r\n\r\n### --- Managing Workers ---\r\n\r\nYou can list all known workers with the command:\r\n\r\n    $ turkic workers\r\n\r\nwhich will dump every worker with the number of jobs they have completed. You\r\ncan also use this command to block and unblock workers:\r\n\r\n    $ turkic workers --block workerid\r\n    $ turkic workers --unblock workerid\r\n\r\nYou can also search for workers by the first few letters of their ID:\r\n\r\n    $ turkic workers --search A3M\r\n\r\n### --- Deleting a Video ---\r\n\r\nYou can delete a video at any time with:\r\n\r\n    $ turkic delete identifier\r\n\r\nIf the video has already been annotated (even partially), this command will \r\nwarn you and abort. You can force deletion with:\r\n\r\n    $ turkic delete identifier --force\r\n\r\nwhich will REMOVE ALL DATA AND CANNOT BE UNDONE.\r\n\r\n## == FEEDBACK AND BUGS ==\r\n\r\nPlease direct all comments and report all bugs to:\r\n\r\nMenglong Zhu <menglong@cis.upenn.edu>\r\n\r\nhttp://www.seas.upenn.edu/~menglong/\r\n\r\nThanks for using our system!\r\n","google":"UA-49580934-1","note":"Don't delete this file! It's used internally to help with page regeneration."}